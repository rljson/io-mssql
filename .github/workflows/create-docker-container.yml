name: Create Docker Container
on:
  workflow_dispatch:
jobs:
  create-container:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]
    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: YourStrong!Passw0rd
          MSSQL_PID: Developer
        ports:
          - 1433:1431
        options: >-
          --health-cmd="curl -f http://localhost:1431 || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Compose
        run: |
          docker-compose up -d
          sleep 20  # wait for MSSQL to be ready

      - name: Run tests or scripts
        run: |
          # Example: run a script that connects to MSSQL
          echo "Running tests against MSSQL..."

      # Corepack aktivieren, um sicherzustellen, dass pnpm funktioniert
      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Cache pnpm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - run: pnpm install --frozen-lockfile
# - name: Create Docker container
#   run: |
#     docker build -t my-node-app .
#     docker run -d -p 3000:3000 --name my-running-app my-node-app

# - name: Verify container is running
#   run: docker ps | grep my-running-app
# - name: Test application endpoint
#   run: |
#     sleep 10 # Wait for the app to start
#     curl -f http://localhost:3000 || exit 1
# - name: Stop and remove container
#   run: |
#     docker stop my-running-app
#     docker rm my-running-app
