name: Create Docker Container

on:
  workflow_dispatch:

jobs:
  create-container:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [22.x]

    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: Password123!
          MSSQL_PID: Developer
        ports:
          - 14330:1433
        # Removed health check

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Wait for MSSQL to be ready
        run: |
          echo "Waiting for MSSQL to start..."
          sleep 30  # Adjust if needed

      - name: Test MSSQL connection
        run: |
          echo "Testing MSSQL connection..."
          # Optional: install sqlcmd and test connection

      # - name: Set up Docker Compose
      #   run: |
      #     docker-compose up -d
      #     sleep 40  # wait for MSSQL to be ready

      # - name: Run tests or scripts
      #   run: |
      #     # Example: run a script that connects to MSSQL
      #     echo "Running tests against MSSQL..."

      # Corepack aktivieren, um sicherzustellen, dass pnpm funktioniert
      - name: Enable Corepack
        run: corepack enable

      - name: Setup pnpm
        uses: pnpm/action-setup@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Cache pnpm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      - run: pnpm install --frozen-lockfile
